“Internationalization and localization (other correct spellings are internationalisation and localisation) are means of adapting computer software to different languages, regional differences and technical requirements of a target market. Internationalization is the process of designing a software application so that it can potentially be adapted to various languages and regions without engineering changes. Localization is the process of adapting internationalized software for a specific region or language by adding locale-specific components and translating text. Localization (which is potentially performed multiple times, for different locales) uses the infrastructure or flexibility provided by internationalization (which is ideally performed only once, or as an integral part of ongoing development).”
Wikipedia - http://en.wikipedia.org/wiki/Internationalization_and_localization


Usage:
------

1.	Specify the strings to translate:
•	If they are strings contained into a *.py file:
Translation strings are specified using the function _ (). (The function name is the underscore character). This feature is available globally (included as a component) so it’s not necessary to import it. 
In this example, the text "Welcome to my site." is marked as a translation string:


def my_view(request):
	output = _("Welcome to my site.")
	return HttpResponse(output)


django.utils.translation.gettext() funcition is similar to _(). For example:


from django.utils.translation import gettext
def my_view(request):
	output = gettext("Welcome to my site.")
	return HttpResponse(output)


Most developers prefer to use _ () because it is shorter. 
•         Si son cadenas dentro de un template:
If chains are within a template: 
Translations in Django templates use two template tags and a slightly different syntax of Python code. For your templates can access those labels put “{% load i18n%}” to the top of your template.

The template tag “{% trans%}” marks a string for translation:

<title>{% trans "This is the title." %}</title>

2.   	Update files containing translations of these strings using the command:
C:\Python33\Lib\site-packages\django\bin\django-admin.py makemessages –a
This updates the content in the file django.po, wich is located in locale/idioma_que_sea/LC_MESSAGES
The content of this file is like this:
#: path/to/python/module.py:23
msgid "Welcome to my site." # String to translate
msgstr "" # String translation
3.   	When we finish translating, we run the command:
C:\Python33\Lib\site-packages\django\bin\django-admin.py compilemessages
So *.mo files that allows making translations are generated
4.    For the translation to work properly, copy the locale with files that have been generated in the project directory of the application (which are models.py, admin.py, views.py, etc.) Folder.

Installation:
-------------

1.   	Update settings.py
First we must ensure that USER_I18N is TRUE. It’s true by default. 
LANGUAGE_CODE controls the default language that our site will have, if you only need to support a language we have to say here. In our case we should not touch anything as it comes by default with support in English. 
In MIDDLEWARE_CLASSES, make sure you have these elements in the following order:
MIDDLEWARE_CLASSES = (
   'django.middleware.common.CommonMiddleware',
   'django.contrib.sessions.middleware.SessionMiddleware',
   'django.contrib.auth.middleware.AuthenticationMiddleware',
   'django.middleware.locale.LocaleMiddleware',
)
2.   	Get the gettext library. It’s the GNU internationalization library (i18n). 
For Windows:
•         Download: http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/gettext-tools-0.17.zip
•         http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/gettext-runtime-0.17.zip
•         Create in Program Files a folder called “gettext-utils”
•         Download the content of both *.zip files into de folder
•         Update the SYSTEM PATH. You need to go to Control Panel > System > Advanced Options > Enviroment Variables
•         In Enviroment Variables’ list, we select Path and we click in “Edit”.
•         Add this to the path “;C:\Program Files\gettext-utils\bin”.
For Ubuntu:
               	sudo apt-get install gettext
For Mac:
https://gist.github.com/mbillard/1647940
3.       In order to test it, create a very basic "Hello World" template in which we add a term to be translated:
{% load i18n %}
{% trans "Hello" %}
4.     Create translation files:
Create the “locale” folder using the console.
               	mkdir locale
Then create the translation files. They will contain the Strings to translate and the translation:
               	django-admin.py makemessages -l en
               	django-admin.py makemessages -l sv
5.   	Translate the “Hello” string and compile the translation files:
django-admin.py compilemessages

How to allow users select a language:
-------------------------------------

Make sure that we have the following line in MIDDLEWARE_CLASSE (look in settings.py):

MIDDLEWARE_CLASSES = ( ... 'django.middleware.locale.LocaleMiddleware', ... )


So Django will look for the language preference in this order:
1.	request.session['django_language'];
2.	request.COOKIES[settings.LANGUAGE_COOKIE_NAME];
3.	every language in request.META['HTTP_ACCEPT_LANGUAGE'], until accepted one is found;
4.	settings.LANGUAGE_CODE.
The faster thing we can do is to rewrite the session language:      request.session['django_language']


Example:
def someview (request): 
... 
request.session['django_language'] = 'en' 
...


Bibliography:
-------------

http://django-book.mkaufmann.com.ar/chapter18.html
http://devdoodles.wordpress.com/2009/02/14/multi-language-support-in-a-django-project/
https://www.gnu.org/software/gettext/
https://docs.djangoproject.com/en/dev/topics/i18n/translation/#gettext-on-windows
http://stackoverflow.com/questions/2605384/how-to-explicitly-set-django-langauge-in-django-session
